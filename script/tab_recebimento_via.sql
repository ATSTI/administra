SET TERM ^ ;
DROP TRIGGER ALTERA_REC ^
DROP TRIGGER GERA_REC ^
DROP TRIGGER INCLUI_REC^
DROP TRIGGER TRG_NF_CR_ALTERA^
DROP PROCEDURE  GERA_PARCELAS_REC^
DROP PROCEDURE  GERA_REC_DUPLICATAS^

COMMIT ^


ALTER TABLE RECEBIMENTO ALTER VIA TYPE TEXTO3 ^

CREATE OR ALTER TRIGGER ALTERA_REC FOR VENDA ACTIVE
AFTER UPDATE
POSITION 0
as
  DECLARE VARIABLE i integer;
  DECLARE VARIABLE status_venda char(2);
  DECLARE VARIABLE VLR_TITULO DOUBLE PRECISION;
  DECLARE VARIABLE VLR_RESTO DOUBLE PRECISION;
  DECLARE VARIABLE VLR_PARCELA DOUBLE PRECISION;
  DECLARE VARIABLE VLR_PRIM_VIA DOUBLE PRECISION;
  DECLARE VARIABLE VLR_JM DOUBLE PRECISION;
  DECLARE VARIABLE VLR_DESC DOUBLE PRECISION;
  DECLARE VARIABLE N_PARC INTEGER;
  DECLARE VARIABLE CAIXA INTEGER;
begin
  /* Se a mudanca foi de Status entao nao executa nada */
  if (NEW.STATUS <> 3) THEN
  begin
/* Se o STATUS da Tab RECEBIMENTO for diferente de '5-', não é permitido fazer alteração */
  IF (NOT EXISTS(SELECT STATUS FROM RECEBIMENTO WHERE CODVENDA = OLD.CODVENDA AND STATUS like '5-')) THEN
    EXCEPTION altera_venda_n_permitido;
  if ((NEW.NOTAFISCAL || NEW.SERIE) <> (OLD.NOTAFISCAL || OLD.SERIE)) then
    begin
      update RECEBIMENTO set 
        TITULO = (NEW.NOTAFISCAL || '-' || NEW.SERIE)
      where CODVENDA = NEW.CODVENDA;
    end
  if (NEW.DATAVENDA <> OLD.DATAVENDA) then
    begin
      update RECEBIMENTO set 
        EMISSAO = NEW.DATAVENDA
      where CODVENDA = NEW.CODVENDA;
    end
  if (NEW.CODCLIENTE <> OLD.CODCLIENTE) then
    begin
      update RECEBIMENTO set 
        CODCLIENTE = NEW.CODCLIENTE
      where CODVENDA = NEW.CODVENDA;
    end
  
    /* Alterando a data de Vencimento */

    if (NEW.DATAVENCIMENTO <> OLD.DATAVENCIMENTO) then
    begin
      if (NEW.N_PARCELA = 1) then
      begin
        update RECEBIMENTO set 
               DATAVENCIMENTO = NEW.DATAVENCIMENTO
        where CODVENDA = NEW.CODVENDA;
      end
      else
      begin
        i = 0;
        while (i < NEW.N_PARCELA) do
        begin
          update RECEBIMENTO set 
          DATAVENCIMENTO = udf_IncMonth(NEW.DATAVENCIMENTO, :i) 
          where CODVENDA = NEW.CODVENDA AND VIA = (:i + 1);
          i = i + 1;
        end
      end
    end

  /* Alterando a C. Custo */

  if (NEW.CODCCUSTO <> OLD.CODCCUSTO) then
    begin
      update RECEBIMENTO set 
        CODALMOXARIFADO = NEW.CODCCUSTO
      where CODVENDA = NEW.CODVENDA;
    end

  /* Alterando a CAIXA */

  if (NEW.CAIXA <> OLD.CAIXA) then
    begin
      update RECEBIMENTO set 
        CAIXA = NEW.CAIXA
      where CODVENDA = NEW.CODVENDA;
    end


  /* Alterando a N_DOCUMENTO */

  if (NEW.N_DOCUMENTO <> OLD.N_DOCUMENTO) then
    begin
      update RECEBIMENTO set 
        N_DOCUMENTO = NEW.N_DOCUMENTO
      where CODVENDA = NEW.CODVENDA;
    end

  /* Alterando a C. Vendedor */

  if (NEW.CODVENDEDOR <> OLD.CODVENDEDOR) then
    begin
      update RECEBIMENTO set 
        CODVENDEDOR = NEW.CODVENDEDOR
      where CODVENDA = NEW.CODVENDA;
    end

  /* Alterando o VALOR_PRIM_VIA */

  if ((NEW.VALOR - NEW.DESCONTO) <> (OLD.VALOR - OLD.DESCONTO)) then
  begin
    if (NEW.N_PARCELA = 1) then
    begin
      update RECEBIMENTO set 
             VALOR_PRIM_VIA = (NEW.VALOR - NEW.DESCONTO)
      where CODVENDA = NEW.CODVENDA AND STATUS = '5-';
    end
    else
    begin
      i = 1;
      while (i <= NEW.N_PARCELA) do
      begin
        update RECEBIMENTO set 
               VALOR_PRIM_VIA = ((NEW.VALOR - NEW.DESCONTO)/NEW.N_PARCELA) 
        where CODVENDA = NEW.CODVENDA AND STATUS = '5-' AND VIA = :i;
        i = i + 1;
      end
    end
  end
  if ((NEW.VALOR - NEW.DESCONTO) <> (OLD.VALOR - OLD.DESCONTO)) then
    begin
      update RECEBIMENTO set 
        VALORTITULO = (NEW.VALOR - NEW.DESCONTO)
      where CODVENDA = NEW.CODVENDA AND STATUS = '5-';
    end

  /* Alterando o VALOR_RESTO */

  if ((NEW.VALOR - NEW.DESCONTO) <> (OLD.VALOR - OLD.DESCONTO)) then
  begin
    if (NEW.N_PARCELA = 1) then
    begin
      update RECEBIMENTO set 
             VALOR_RESTO = (NEW.VALOR - NEW.DESCONTO)
      where CODVENDA = NEW.CODVENDA AND STATUS = '5-';
    end
    else
    begin
      i = 1;
      while (i <= NEW.N_PARCELA) do
      begin
        update RECEBIMENTO set 
               VALOR_RESTO = ((NEW.VALOR - NEW.DESCONTO)/NEW.N_PARCELA) 
        where CODVENDA = NEW.CODVENDA AND STATUS = '5-' AND VIA = :i;
        i = i + 1;
      end
    end
  end
  /******************************************************************************************/
  /* Se houve alteração no número de parcelas então excluo o q existe e crio tudo novamente */
  /******************************************************************************************/
  IF (NEW.N_PARCELA <> OLD.N_PARCELA) THEN
  BEGIN
    DELETE FROM RECEBIMENTO WHERE CODVENDA = OLD.CODVENDA;
   i = 0;
   VLR_PRIM_VIA = NEW.VALOR;
   VLR_TITULO = NEW.VALOR;
   VLR_DESC = NEW.DESCONTO;
   VLR_JM =  NEW.MULTA_JUROS;
   VLR_RESTO =  ((NEW.VALOR - NEW.DESCONTO + NEW.MULTA_JUROS)- NEW.ENTRADA);
   N_PARC = NEW.N_PARCELA;
   if (NEW.ENTRADA > 0) then
   begin
     status_venda = '7-';
     INSERT INTO RECEBIMENTO 
       (TITULO, EMISSAO, CODCLIENTE, DATAVENCIMENTO, STATUS , VIA, FORMARECEBIMENTO, 
       CODVENDA , CODALMOXARIFADO, CODVENDEDOR, CODUSUARIO
       , DATASISTEMA, VALOR_PRIM_VIA, VALOR_RESTO, VALORTITULO, VALORRECEBIDO, PARCELAS
       , DESCONTO, JUROS, FUNRURAL, PERDA, TROCA,N_DOCUMENTO, OUTRO_CREDITO, CAIXA) 
     VALUES 
       ((NEW.NOTAFISCAL || '-' || NEW.SERIE), NEW.DATAVENDA, NEW.CODCLIENTE, NEW.DATAVENDA,
       :status_venda, CAST((:i + 1) as CHAR(3)),NEW.FORMARECEBIMENTO, NEW.CODVENDA, NEW.CODCCUSTO, NEW.CODVENDEDOR, NEW.CODUSUARIO,  
       'NOW', :VLR_PRIM_VIA, :VLR_RESTO, :VLR_TITULO, NEW.ENTRADA, NEW.N_PARCELA,:VLR_DESC,:VLR_JM,0,0,0, NEW.N_DOCUMENTO, 0, new.CAIXA);
     i = 1;
     N_PARC = (NEW.N_PARCELA - 1);
   end
   while (i < (N_PARC + 1)) do
   begin
     if (NEW.STATUS = 0) then
     begin     
       status_venda = '5-';
       CAIXA = null; 
     end
     if (NEW.STATUS = 1) then
     begin
       status_venda = '7-';  
       CAIXA = new.CAIXA;  
     end
     if ((i+1) > 1) then 
     begin
       VLR_PRIM_VIA = 0;
     end
     if (i = 0) then
     begin
       i = 1;
     end
     VLR_RESTO =  ((NEW.VALOR - NEW.DESCONTO + NEW.MULTA_JUROS)- NEW.ENTRADA)/N_PARC;
     INSERT INTO RECEBIMENTO 
       (TITULO, EMISSAO, CODCLIENTE, DATAVENCIMENTO, STATUS , VIA, FORMARECEBIMENTO, 
       CODVENDA , CODALMOXARIFADO, CODVENDEDOR, CODUSUARIO
       , DATASISTEMA, VALOR_PRIM_VIA, VALOR_RESTO, VALORTITULO, PARCELAS, VALORRECEBIDO
       , DESCONTO, JUROS, FUNRURAL, PERDA, TROCA, N_DOCUMENTO, OUTRO_CREDITO, CAIXA) 
     VALUES 
       ((NEW.NOTAFISCAL || '-' || NEW.SERIE), NEW.DATAVENDA, NEW.CODCLIENTE, udf_IncMonth(NEW.DATAVENCIMENTO, (:i-1)),
       :status_venda, CAST((:i) as CHAR(3)),NEW.FORMARECEBIMENTO, NEW.CODVENDA, NEW.CODCCUSTO, NEW.CODVENDEDOR, NEW.CODUSUARIO,  
       'NOW', :VLR_PRIM_VIA, :VLR_RESTO, :VLR_TITULO, NEW.N_PARCELA,0,0,0,0,0,0, NEW.N_DOCUMENTO, 0, :CAIXA);
     i = i + 1;    
   end
    
  END
  end
end^


CREATE OR ALTER TRIGGER GERA_REC FOR RECEBIMENTO ACTIVE
AFTER UPDATE
POSITION 0
AS
  DECLARE VARIABLE status_venda char(2);
  DECLARE VARIABLE VLR_RESTO DOUBLE PRECISION;
begin
  IF ((OLD.STATUS <> '7-') and (NEW.STATUS = '7-')) THEN
    IF (((NEW.VALORRECEBIDO)+0.001) < OLD.VALOR_RESTO) THEN
    begin
     status_venda = '5-';
     VLR_RESTO =  ((OLD.VALOR_RESTO - NEW.DESCONTO + NEW.JUROS - NEW.PERDA + NEW.FUNRURAL - NEW.TROCA)- NEW.VALORRECEBIDO)/(OLD.PARCELAS-1);
     INSERT INTO RECEBIMENTO 
       (TITULO, EMISSAO, CODCLIENTE, DATAVENCIMENTO, STATUS , VIA, FORMARECEBIMENTO, 
       CODALMOXARIFADO, CODVENDEDOR, CODUSUARIO
       , DATASISTEMA, VALOR_PRIM_VIA, VALOR_RESTO, VALORTITULO, PARCELAS, CAIXA, 
       CODVENDA, CONTADEBITO, CONTACREDITO, PERDA, TROCA, FUNRURAL) 
     VALUES 
       (OLD.TITULO, OLD.EMISSAO, OLD.CODCLIENTE, OLD.DATAVENCIMENTO, 
       :status_venda, CAST((CAST(OLD.VIA as INTEGER) + 1) as CHAR(3)),'1', OLD.CODALMOXARIFADO, OLD.CODVENDEDOR, 
        OLD.CODUSUARIO,
       'NOW', 0, :VLR_RESTO, OLD.VALORTITULO, OLD.PARCELAS, OLD.CAIXA, OLD.CODVENDA, OLD.CONTADEBITO, 
       OLD.CONTACREDITO, 0,0,0);
   end
end^

CREATE OR ALTER TRIGGER INCLUI_REC FOR VENDA ACTIVE
AFTER INSERT
POSITION 0
AS
  DECLARE VARIABLE i integer;
  DECLARE VARIABLE status_venda char(2);
  DECLARE VARIABLE VLR_TITULO DOUBLE PRECISION;
  DECLARE VARIABLE VLR_RESTO DOUBLE PRECISION;
  DECLARE VARIABLE VLR_PARCELA DOUBLE PRECISION;
  DECLARE VARIABLE VLR_PRIM_VIA DOUBLE PRECISION;
  DECLARE VARIABLE VLR_JM DOUBLE PRECISION;
  DECLARE VARIABLE VLR_DESC DOUBLE PRECISION;
  DECLARE VARIABLE N_PARC INTEGER;
  DECLARE VARIABLE NATUREZA INTEGER;
  DECLARE VARIABLE CAIXA INTEGER;
  DECLARE VARIABLE DTAREC DATE;
begin
   SELECT DISTINCT CODNATUREZA FROM MOVIMENTO WHERE CODMOVIMENTO = NEW.CODMOVIMENTO 
   INTO :NATUREZA;
   if (NATUREZA = 3) then
BEGIN
   i = 0;
   VLR_PRIM_VIA = NEW.VALOR;
   VLR_TITULO = NEW.VALOR;
   VLR_DESC = NEW.DESCONTO;
   VLR_JM =  NEW.MULTA_JUROS;
   VLR_RESTO =  ((NEW.VALOR - NEW.DESCONTO + NEW.MULTA_JUROS)- NEW.ENTRADA);
   N_PARC = NEW.N_PARCELA;
   if (NEW.ENTRADA > 0) then
   begin
     status_venda = '7-';
     INSERT INTO RECEBIMENTO 
       (TITULO, EMISSAO, CODCLIENTE, DATAVENCIMENTO, STATUS , VIA, FORMARECEBIMENTO, 
       CODVENDA , CODALMOXARIFADO, CODVENDEDOR, CODUSUARIO
       , DATASISTEMA, VALOR_PRIM_VIA, VALOR_RESTO, VALORTITULO, VALORRECEBIDO, PARCELAS
       , DESCONTO, JUROS, FUNRURAL, PERDA, TROCA, N_DOCUMENTO, OUTRO_CREDITO, CAIXA, DATARECEBIMENTO ) 
     VALUES 
       ((NEW.NOTAFISCAL || '-' || NEW.SERIE), NEW.DATAVENDA, NEW.CODCLIENTE, NEW.DATAVENDA,
       :status_venda, CAST((:i + 1) as CHAR(3)),'1', NEW.CODVENDA, NEW.CODCCUSTO, NEW.CODVENDEDOR, NEW.CODUSUARIO,  
       'NOW', :VLR_PRIM_VIA, :VLR_RESTO, :VLR_TITULO, NEW.ENTRADA, NEW.N_PARCELA,:VLR_DESC,:VLR_JM,0,0,0, NEW.N_DOCUMENTO, 0, new.CAIXA, NEW.DATAVENDA);
     i = 1;
     N_PARC = (NEW.N_PARCELA - 1);
   end
   while (i < (N_PARC + 1)) do
   begin
     if (NEW.STATUS = 0) then
     begin     
       status_venda = '5-';
       CAIXA = null;
       DTAREC = null; 
     end
     if (NEW.STATUS = 1) then
     begin
       status_venda = '7-';  
       caixa = new.caixa;
       DTAREC = NEW.DATAVENDA;
     end
     if ((i+1) > 1) then 
     begin
       VLR_PRIM_VIA = 0;
     end
     if (i = 0) then
     begin
       i = 1;
     end
     VLR_RESTO =  ((NEW.VALOR - NEW.DESCONTO + NEW.MULTA_JUROS)- NEW.ENTRADA)/N_PARC;
     INSERT INTO RECEBIMENTO 
       (TITULO, EMISSAO, CODCLIENTE, DATAVENCIMENTO, STATUS , VIA, FORMARECEBIMENTO, 
       CODVENDA , CODALMOXARIFADO, CODVENDEDOR, CODUSUARIO
       , DATASISTEMA, VALOR_PRIM_VIA, VALOR_RESTO, VALORTITULO, PARCELAS, VALORRECEBIDO
       , DESCONTO, JUROS, FUNRURAL, PERDA, TROCA,N_DOCUMENTO, OUTRO_CREDITO, CAIXA, DATARECEBIMENTO) 
     VALUES 
       ((NEW.NOTAFISCAL || '-' || NEW.SERIE), NEW.DATAVENDA, NEW.CODCLIENTE, udf_IncMonth(NEW.DATAVENCIMENTO, (:i-1)),
       :status_venda, CAST((:i) as CHAR(3)),'1', NEW.CODVENDA, NEW.CODCCUSTO, NEW.CODVENDEDOR, NEW.CODUSUARIO,  
       'NOW', :VLR_PRIM_VIA, :VLR_RESTO, :VLR_TITULO, NEW.N_PARCELA,0,0,0,0,0,0, NEW.N_DOCUMENTO,0, :CAIXA, :DTAREC);
     i = i + 1;    
   end
end
end^

CREATE OR ALTER TRIGGER TRG_NF_CR_ALTERA FOR NOTAFISCAL ACTIVE
AFTER UPDATE
POSITION 0
AS
  DECLARE VARIABLE VALOR DOUBLE PRECISION;
  DECLARE VARIABLE VALORN DOUBLE PRECISION;
  DECLARE VARIABLE VALOR_TOTAL DOUBLE PRECISION;
  DECLARE VARIABLE PARC SMALLINT;
BEGIN
   IF (OLD.CODVENDA IS NOT NULL) THEN
   IF (OLD.VALOR_TOTAL_NOTA <> NEW.VALOR_TOTAL_NOTA) THEN
   BEGIN
       /* Valores Pendentes desta VENDA */
       select sum(VALOR_PRIM_VIA), sum(VALORRECEBIDO), MAX(VIA) from RECEBIMENTO 
           where (CODVENDA = NEW.CODVENDA)
       INTO :VALOR, :VALOR_TOTAL, :PARC;
       IF ((VALOR - VALOR_TOTAL)  > 0) then
       BEGIN    
         VALOR = VALOR - VALOR_TOTAL;
         VALOR_TOTAL = VALOR + VALOR_TOTAL;
         VALORN = NEW.VALOR_TOTAL_NOTA - OLD.VALOR_PRODUTO;
          /* NEW.VALOR_FRETE + NEW.VALOR_SEGURO + NEW.OUTRAS_DESP + NEW.VALOR_IPI; */
         VALOR_TOTAL = VALOR_TOTAL + VALORN;
         VALOR = (VALOR / PARC);
         VALORN = (VALORN / PARC);
         VALOR = VALOR + VALORN;
         UPDATE RECEBIMENTO SET VALORTITULO = :VALOR_TOTAL, VALOR_RESTO = :VALOR
           WHERE CODVENDA = NEW.CODVENDA and ((STATUS = '5-') OR (STATUS = '6-') OR (STATUS = '9-'));   
       END
    END
END^

CREATE OR ALTER PROCEDURE  GERA_PARCELAS_REC( N_TITULO                         VARCHAR( 18 )
                                  , DT_EMISSAO                       DATE
                                  , COD_CLIENTE                      INTEGER )
AS
DECLARE VARIABLE I INTEGER;
DECLARE VARIABLE STATUS_VENDA CHAR(2);
DECLARE VARIABLE VLR_RESTO DOUBLE PRECISION;
DECLARE VARIABLE N_PARC INTEGER;
DECLARE VARIABLE PARC INTEGER;
DECLARE VARIABLE V_CODORIGEM INTEGER;
DECLARE VARIABLE DATA_EMISSAO DATE;
DECLARE VARIABLE DATA_VENC DATE;
DECLARE VARIABLE COD_US SMALLINT;
DECLARE VARIABLE COD_CC INTEGER;
DECLARE VARIABLE COD_CLIEN INTEGER;
DECLARE VARIABLE V_VLRTITULO DOUBLE PRECISION = 0;
DECLARE VARIABLE V_VLRRECEBIDO DOUBLE PRECISION = 0;
DECLARE VARIABLE V_DESCONTO DOUBLE PRECISION = 0;
DECLARE VARIABLE V_JUROS DOUBLE PRECISION = 0;
DECLARE VARIABLE COD_CAIXA SMALLINT;
DECLARE VARIABLE COD_FORN INTEGER;
DECLARE VARIABLE VLR_PRIM_VIA DOUBLE PRECISION = 0;
DECLARE VARIABLE COD_VEND SMALLINT;
DECLARE VARIABLE COD_CD INTEGER;
DECLARE VARIABLE COD_CCRE INTEGER;
begin
  /* Pegando os dados do tÃ­tulo lanÃ§ado */
  SELECT CODRECEBIMENTO, EMISSAO, DATAVENCIMENTO, CODUSUARIO, CODALMOXARIFADO, CAIXA, CODCLIENTE,
    VALOR_PRIM_VIA, VALORRECEBIDO, DESCONTO, JUROS, PARCELAS, CODVENDEDOR, CONTADEBITO, CONTACREDITO
    FROM RECEBIMENTO 
    where ((TITULO = :N_TITULO) AND (EMISSAO = :DT_EMISSAO) AND (CODCLIENTE = :COD_CLIENTE)) 
    INTO :V_CODORIGEM, :DATA_EMISSAO, :DATA_VENC, :COD_US, :COD_CC, :COD_CAIXA , :COD_CLIEN, 
         :V_VLRTITULO, :V_VLRRECEBIDO, :V_DESCONTO, :V_JUROS, :PARC, :COD_VEND, :COD_CD, :COD_CCRE;
   i = 1;
   N_PARC = PARC;

  
   if (:V_VLRRECEBIDO > 0) then
   begin
     status_venda = '7-';
     VLR_RESTO =  ((V_VLRTITULO - V_DESCONTO + V_JUROS)- V_VLRRECEBIDO);
     UPDATE RECEBIMENTO SET 
       VIA = 1, 
       valor_resto = :VLR_RESTO,
       STATUS = :status_venda,
       DATARECEBIMENTO = :DATA_EMISSAO 
       WHERE CODRECEBIMENTO = :V_CODORIGEM;
     i = 2;
     N_PARC = (PARC - 1);
   end
   else begin
     VLR_RESTO =  ((V_VLRTITULO - V_DESCONTO + V_JUROS)- V_VLRRECEBIDO)/N_PARC;
     UPDATE RECEBIMENTO SET 
       VALOR_RESTO = :VLR_RESTO,
       VIA = 1 
       WHERE CODRECEBIMENTO = :V_CODORIGEM;
   end
  
   while (i < :PARC) do
   begin
     status_venda = '5-';
     if ((i+1) > 1) then 
     begin
       VLR_PRIM_VIA = 0;
     end
     VLR_RESTO =  ((V_VLRTITULO - V_DESCONTO + V_JUROS)- V_VLRRECEBIDO)/N_PARC;
     IF (V_VLRRECEBIDO > 0) THEN
     BEGIN
       INSERT INTO RECEBIMENTO 
         (TITULO, EMISSAO, CODCLIENTE, DATAVENCIMENTO, STATUS , VIA, FORMARECEBIMENTO, 
         CODALMOXARIFADO, CODVENDEDOR, CODUSUARIO
         , DATASISTEMA, VALOR_PRIM_VIA, VALOR_RESTO, VALORTITULO, PARCELAS, CAIXA, CONTADEBITO, CONTACREDITO) 
       VALUES 
         ((:N_TITULO), :DT_EMISSAO, :COD_CLIEN, udf_IncMonth(:DATA_VENC, (:i-1)),
         :status_venda, CAST((:i + 1) as CHAR(3)),'1', :COD_CC, :COD_VEND, :COD_US,  
         'NOW', :VLR_PRIM_VIA, :VLR_RESTO, :V_VLRTITULO, :PARC, :COD_CAIXA, :COD_CD, :COD_CCRE);
     END
     IF (V_VLRRECEBIDO = 0) THEN
     BEGIN
       INSERT INTO RECEBIMENTO 
         (TITULO, EMISSAO, CODCLIENTE, DATAVENCIMENTO, STATUS , VIA, FORMARECEBIMENTO, 
         CODALMOXARIFADO, CODVENDEDOR, CODUSUARIO
         , DATASISTEMA, VALOR_PRIM_VIA, VALOR_RESTO, VALORTITULO, PARCELAS, CAIXA, CONTADEBITO, CONTACREDITO) 
       VALUES 
         ((:N_TITULO), :DT_EMISSAO, :COD_CLIEN, udf_IncMonth(:DATA_VENC, (:i)),
         :status_venda, CAST((:i + 1) as CHAR(3)),'1', :COD_CC, :COD_VEND, :COD_US,  
         'NOW', :VLR_PRIM_VIA, :VLR_RESTO, :V_VLRTITULO, :PARC, :COD_CAIXA, :COD_CD, :COD_CCRE);
     END
     i = i + 1;    
   end
end ^


CREATE OR ALTER PROCEDURE  GERA_REC_DUPLICATAS( N_TITULO                         VARCHAR( 18 )
                                    , DT_EMISSAO                       DATE
                                    , COD_CLIENTE                      INTEGER
                                    , DATA_EMISSAO                     DATE
                                    , DATA_VENC                        DATE
                                    , PARC                             INTEGER
                                    , V_VLRTITULO                      DOUBLE PRECISION
                                    , V_VLRRECEBIDO                    DOUBLE PRECISION
                                    , V_DESCONTO                       DOUBLE PRECISION
                                    , V_JUROS                          DOUBLE PRECISION )
AS
DECLARE VARIABLE I INTEGER;
DECLARE VARIABLE STATUS_VENDA CHAR(2);
DECLARE VARIABLE N_PARC INTEGER;
DECLARE VARIABLE V_CODORIGEM INTEGER;
DECLARE VARIABLE COD_US SMALLINT;
DECLARE VARIABLE COD_CC INTEGER;
DECLARE VARIABLE COD_CAIXA SMALLINT;
DECLARE VARIABLE COD_FORN INTEGER;
DECLARE VARIABLE VLR_PRIM_VIA DOUBLE PRECISION;
DECLARE VARIABLE VLR_RESTO DOUBLE PRECISION;
DECLARE VARIABLE COD_VEND SMALLINT;
DECLARE VARIABLE COD_CD INTEGER;
DECLARE VARIABLE COD_CCRE INTEGER;
DECLARE VARIABLE SERIE CHARACTER(2);
DECLARE VARIABLE NUM_DUP INTEGER;
begin
     /* Pegando os dados do título lançado - pego só do primeiro pq os campos não são importantes*/
     SELECT CODVENDA, CODUSUARIO, CODALMOXARIFADO, CAIXA, 
        CODVENDEDOR, CONTADEBITO, CONTACREDITO
     FROM RECEBIMENTO 
     where ((TITULO = :N_TITULO) AND (EMISSAO = :DT_EMISSAO) AND (CODCLIENTE = :COD_CLIENTE) AND VIA = 1) 
     INTO :V_CODORIGEM, :COD_US, :COD_CC, :COD_CAIXA , 
              :COD_VEND, :COD_CD, :COD_CCRE;
      i = 0;
      VLR_PRIM_VIA = V_VLRTITULO;
      N_PARC = PARC;
      /* Buscando a numeracao da duplicata */
      SELECT DADOS FROM PARAMETRO WHERE PARAMETRO = 'SERIEDUPLICATA'
      INTO :SERIE;
      IF (SERIE IS NULL) THEN
          INSERT INTO PARAMETRO (PARAMETRO, DADOS) VALUES ('SERIEDUPLICATA','D');
      SELECT ULTIMO_NUMERO FROM SERIES WHERE SERIE = :SERIE
      INTO :NUM_DUP;
      IF (NUM_DUP IS NULL) THEN 
      BEGIN
         INSERT INTO SERIES (SERIE, ULTIMO_NUMERO) VALUES ('D', 1);
         NUM_DUP = 1;
      END
      NUM_DUP = NUM_DUP + 1;
      N_TITULO = CAST(NUM_DUP AS VARCHAR(10)) || '-' || SERIE; 
      while (i < :PARC) do
      begin
         status_venda = '9-';
          if ((i+1) > 1) then 
         begin
            VLR_PRIM_VIA = 0;
         end
         VLR_RESTO =  ((V_VLRTITULO - V_DESCONTO + V_JUROS) - V_VLRRECEBIDO)/N_PARC;
         INSERT INTO RECEBIMENTO 
           (CODVENDA, TITULO, EMISSAO, CODCLIENTE, DATAVENCIMENTO, STATUS , VIA, FORMARECEBIMENTO, 
           CODALMOXARIFADO, CODVENDEDOR, CODUSUARIO
            , DATASISTEMA, VALOR_PRIM_VIA, VALOR_RESTO, VALORTITULO, PARCELAS, CAIXA, CONTADEBITO, CONTACREDITO, TITULO, DP)
         VALUES 
            (:V_CODORIGEM, (:N_TITULO), :DATA_EMISSAO, :COD_CLIENTE, udf_IncMonth(:DATA_VENC, :i),
            :status_venda, CAST((:i + 1) as CHAR(3)),'1', :COD_CC, :COD_VEND, :COD_US,  
            'NOW', :VLR_PRIM_VIA, :VLR_RESTO, :V_VLRTITULO, :PARC, :COD_CAIXA, :COD_CD, :COD_CCRE, :N_TITULO, :NUM_DUP);
          UPDATE SERIES SET ULTIMO_NUMERO =  :NUM_DUP WHERE SERIE = :SERIE;
          UPDATE RECEBIMENTO SET DUP_REC_NF = '', DP = :NUM_DUP, STATUS = '10'  WHERE DP = 0;
         i = i + 1;    
      end
end ^
